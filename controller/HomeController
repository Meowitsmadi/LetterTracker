package application;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.Optional;
import java.util.ResourceBundle;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.text.Text;
import sql.AccessFunctions;

public class HomeController extends SceneController{
	@FXML private TableView<Student> ResultsTable = new TableView<Student>();
	@FXML private Button sr;
	private ObservableList<Student> studentData;
	@FXML private TableColumn<Student, String> studentFNColumn = new TableColumn<Student, String>();
	@FXML private TableColumn<Student, String> studentLNColumn = new TableColumn<Student, String>();
	@FXML private TableColumn<Student, Integer> studentIDColumn = new TableColumn<Student, Integer>();
	
	@FXML private Text ResultsLabel;
	public static Text staticResultsLabel;
	@FXML public TextField searchBar = new TextField("");
	public String searchedName;
	private StringProperty searchText = new SimpleStringProperty("");
	
	public void switchToResults(ActionEvent event) throws IOException, SQLException{
		ResultsLabel.setText("Results For: " + searchBar.getText());
		updateResults(event, searchBar.getText());
	}
	
	public void updateHomePage(ActionEvent event) throws IOException, SQLException{
		ResultsLabel.setText("Results For: " + searchBar.getText());
		ObservableList<Student> studentList = AccessFunctions.getData(searchedName);
		ResultsTable.setItems(studentList);
	}
	
	public void updateResults(ActionEvent event, String input) throws IOException, SQLException{
		studentData = AccessFunctions.getData(input);
	    System.out.println(studentData);
	    ResultsTable.setItems(studentData);
	    System.out.println(studentData);
	}
	
	
	public void DeleteEntry(ActionEvent event) throws SQLException, IOException {
		// get selected row
		ObservableList<Student> tableItems, selectedRow;
		tableItems = ResultsTable.getItems();
		selectedRow = ResultsTable.getSelectionModel().getSelectedItems();
		
		if(!selectedRow.isEmpty()) {
			int id = 0;
			Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
			alert.setTitle("Confirm Deletion");
			alert.setContentText("Delete the LOR for: " + searchedName + "?");
			Optional<ButtonType> result = alert.showAndWait();
			if (result.get() == ButtonType.OK)
			{
				for (Student student: selectedRow) //get ID of selected row
				{
					id = student.getId();
				}
				selectedRow.forEach(tableItems::remove); // remove from ResultsTable
				AccessFunctions.DeleteRecommendation(id); // remove from DB
			}
		}
	}
	
	public void switchToEditLORScene(ActionEvent event) throws SQLException, IOException {
		ObservableList<Student> selectedRow = ResultsTable.getSelectionModel().getSelectedItems();
		if(!selectedRow.isEmpty()) {
			ID = selectedRow.get(0).getId();
			root = FXMLLoader.load(getClass().getResource("/view/EditLOR.fxml"));
			changeScene(event);
			isEdit = true;
		}
	}
	
	@FXML
	public void switchToViewScene(ActionEvent event) throws SQLException, IOException {
		ObservableList<Student> selectedRow = ResultsTable.getSelectionModel().getSelectedItems();
		//t = new TextArea();
		if(!selectedRow.isEmpty()) {
			ID = selectedRow.get(0).getId();
			student = AccessFunctions.getData(ID);
			String lor = student.getLOR();
			root = FXMLLoader.load(getClass().getResource("/view/ViewLOR.fxml"));
			updateTextArea((lor));
			changeScene(event);
		}
	}
	
	// Method initializes the combo boxes in the Create New Recommendation page by populating them with their respective data from the database
		@Override
		public void initialize(URL location, ResourceBundle resources) {
	        
	        searchText.bind(searchBar.textProperty());
			searchBar.textProperty().addListener((observable, oldValue, newValue) -> {
			    searchedName = newValue;
			});
			
			studentIDColumn.setCellValueFactory(new PropertyValueFactory<>("ID"));
			studentFNColumn.setCellValueFactory(new PropertyValueFactory<>("FirstName"));
			studentLNColumn.setCellValueFactory(new PropertyValueFactory<>("LastName"));
			
		}
}
